{"version":3,"sources":["./src/app/containers/calculator/calculator.container.ts","./src/app/containers/calculator/calculator.container.html","./src/app/containers/calculator/calculator-routing.module.ts","./src/app/services/model/model.service.ts","./src/app/containers/calculator/calculator.module.ts","./src/app/services/index.ts"],"names":[],"mappings":"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","file":"containers-calculator-calculator-module.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { DomSanitizer, SafeUrl } from '@angular/platform-browser';\nimport { IModelParameters } from 'src/app/models';\nimport { ModelService } from 'src/app/services';\nimport { environment } from 'src/environments/environment';\n\n@Component({\n    selector: 'swt-calculator',\n    templateUrl: './calculator.container.html',\n    styleUrls: [ './calculator.container.scss' ]\n})\nexport class CalculatorComponent implements OnInit {\n    fileNotChosen: string;\n    geometryImageSrc: SafeUrl;\n    geometryNames = {\n        sphere: 'sphere',\n        cylinder: 'cylinder',\n        plate: 'plate (one sided)',\n        sorce: 'SORCE',\n        cubesat1u: 'CubeSat, 1U',\n        deployable3u: 'CubeSat, 3U with Panels'\n    };\n    geometryList = Object.keys(this.geometryNames);\n    geometryListSimple = [ 'sphere', 'cylinder', 'plate' ];\n    hasAssociatedImage: boolean;\n    invalidFieldMessage: string;\n    invalidFields: string[];\n    modelForm = new FormGroup({\n        objectType: new FormControl('sphere', [ Validators.required ]),\n        diameter: new FormControl(1.212.toFixed(3), [ Validators.min(0) ]),\n        length: new FormControl(2.010.toFixed(3), [ Validators.min(0) ]),\n        area: new FormControl(3.400.toFixed(3), [ Validators.min(0) ]),\n        pitch: new FormControl(35.6.toFixed(1), [ Validators.min(-90), Validators.max(90) ]),\n        sideslip: new FormControl(12.5.toFixed(1), [ Validators.min(-180), Validators.max(180) ]),\n        temperature: new FormControl(1200.5.toFixed(1), [ Validators.min(0) ]),\n        speed: new FormControl(7800.45.toFixed(2), [ Validators.min(0) ]),\n        composition: new FormGroup({\n            o: new FormControl(100000000000.0.toPrecision(3), [ Validators.min(0) ]),\n            o2: new FormControl(1000000.0.toPrecision(3), [ Validators.min(0) ]),\n            n2: new FormControl(1000000.0.toPrecision(3), [ Validators.min(0) ]),\n            he: new FormControl(1000000.0.toPrecision(3), [ Validators.min(0) ]),\n            h: new FormControl(10000.0.toPrecision(3), [ Validators.min(0) ])\n        }),\n        accommodationModel: new FormControl('SESAM', [ Validators.required ]),\n        energyAccommodation: new FormControl(0.930.toFixed(3), [ Validators.min(0), Validators.max(1) ]),\n        surfaceMass: new FormControl(65.0.toFixed(1), [ Validators.min(10) ])\n    });\n    modelRunning = false;\n    models = [\n        'SESAM',\n        'Goodman',\n        'Fixed'\n    ];\n    payload: IModelParameters;\n    preloadedImageName: string;\n    resultTranslator = {\n        dragCoefficient: {\n            title: 'Drag Coefficient',\n            units: ''\n        },\n        energyAccommodation: {\n            title: 'Energy Accommodation',\n            units: ''\n        },\n        forceCoefficient: {\n            title: 'Force Coefficient',\n            units: 'm<sup>2</sup>'\n        },\n        projectedArea: {\n            title: 'Projected Area',\n            units: 'm<sup>2</sup>'\n        }\n    };\n    results: {};\n    sessionId: string;\n    showArea: boolean;\n    showDiameter: boolean;\n    showEnergyAccommodation: boolean;\n    showLength: boolean;\n    showPitch: boolean;\n    showSideslip: boolean;\n    showSurfaceMass: boolean;\n    uploadedImageName: string = undefined;\n\n    constructor(\n        private _modelService: ModelService,\n        private _sanitizer: DomSanitizer\n    ) {}\n\n    ngOnInit() {\n        this.newSessionId();\n        this.createPayload();\n        this.setShowHideConditions();\n\n        this.modelForm.valueChanges.subscribe( () => {\n            this.validateFields();\n            this.setShowHideConditions();\n            this.results = undefined;\n            this.createPayload();\n        });\n\n        // reset image if pitch, sildeslip, or objectType changes\n        // there is a bug where for number inputs, valueChanges is called twice\n        // but that doesn't matter here, just FYI https://github.com/angular/angular/issues/12540\n        this.modelForm.controls.pitch.valueChanges\n            .subscribe( () => this.resetImage() );\n        this.modelForm.controls.sideslip.valueChanges\n            .subscribe( () => this.resetImage() );\n        this.modelForm.controls.objectType.valueChanges\n            .subscribe( ( type: string ) => {\n                this.hasAssociatedImage = !this.geometryListSimple.includes( type );\n                this.fileNotChosen = undefined;\n                this.resetImage();\n                this.newSessionId();\n                if ( type === 'custom' ) {\n                    // uploadedImageName is set in onFileSelect\n                    this.preloadedImageName = undefined;\n                } else {\n                    this.preloadedImageName = this.hasAssociatedImage ? this.geometryNames[ type ] : undefined;\n                    this.uploadedImageName = undefined;\n                }\n            });\n    }\n\n    // format the model form values to values appropriate for the payload (numbers)\n    createPayload(): void {\n        const modelObject: IModelParameters = this.modelForm.value;\n        const submitFormat: IModelParameters = {\n            objectType: modelObject.objectType,\n            diameter: Number(modelObject.diameter),\n            length: Number(modelObject.length),\n            area: Number(modelObject.area),\n            pitch: Number(modelObject.pitch),\n            sideslip: Number(modelObject.sideslip),\n            temperature: Number(modelObject.temperature),\n            speed: Number(modelObject.speed),\n            composition: {\n                o: Number(modelObject.composition.o),\n                o2: Number(modelObject.composition.o2),\n                n2: Number(modelObject.composition.n2),\n                he: Number(modelObject.composition.he),\n                h: Number(modelObject.composition.h)\n            },\n            accommodationModel: modelObject.accommodationModel,\n            energyAccommodation: Number(modelObject.energyAccommodation),\n            surfaceMass: Number(modelObject.surfaceMass),\n            sessionId: this.sessionId\n        };\n        this.payload = submitFormat;\n    }\n\n    getValidationMessage( control: string, subcontrol?: string ) {\n        switch (control) {\n        case 'objectType':\n            if ( this.modelForm.controls.objectType.hasError('required') ) {\n                return 'you must select an object type';\n            }\n            break;\n        case 'diameter':\n            if ( this.modelForm.controls.diameter.hasError('min') ) {\n                return 'diameter must be positive';\n            }\n            break;\n        case 'length':\n            if ( this.modelForm.controls.length.hasError('min') ) {\n                return 'length must be positive';\n            }\n            break;\n        case 'area':\n            if ( this.modelForm.controls.area.hasError('min') ) {\n                return 'area must be positive';\n            }\n            break;\n        case 'pitch':\n            if ( this.modelForm.controls.pitch.hasError('min') || this.modelForm.controls.pitch.hasError('max') ) {\n                return 'pitch angle must be between -90 and 90';\n            }\n            break;\n        case 'sideslip':\n            if ( this.modelForm.controls.sideslip.hasError('min') || this.modelForm.controls.sideslip.hasError('max') ) {\n                return 'sideslip angle must be between -180 and 180';\n            }\n            break;\n        case 'temperature':\n            if ( this.modelForm.controls.temperature.hasError('min') ) {\n                return 'temperature must be positive';\n            }\n            break;\n        case 'speed':\n            if ( this.modelForm.controls.speed.hasError('min') ) {\n                return 'speed must be positive';\n            }\n            break;\n        case 'composition':\n            if (\n                this.modelForm.controls.composition.invalid && this.modelForm.controls.composition['controls'][subcontrol].hasError('min')\n            ) {\n                return 'value must be positive';\n            }\n            break;\n        case 'accommodationModel':\n            if ( this.modelForm.controls.accommodationModel.hasError('required') ) {\n                return 'you must select a model';\n            }\n            break;\n        case 'energyAccommodation':\n            if ( this.modelForm.controls.energyAccommodation.hasError('min')\n                || this.modelForm.controls.energyAccommodation.hasError('max') ) {\n                return 'energy accommodation must be between 0 and 1';\n            }\n            break;\n        case 'surfaceMass':\n            if ( this.modelForm.controls.surfaceMass.hasError('min') ) {\n                return 'surface mass must be 1 or greater';\n            }\n            break;\n        default:\n            return;\n        }\n    }\n\n    newSessionId() {\n        this.sessionId = 'id-' + Date.now();\n    }\n\n    // triggered when a file is selected\n    onFileSelect( input: any ): void {\n        this.resetImage();\n        this.newSessionId();\n        const file = input.files[0];\n        if ( file ) {\n            this.uploadedImageName = file.name;\n            // must subscribe to trigger observable\n            this._modelService.submitGeometryFile( this.sessionId, file ).subscribe();\n            // onFileSelect happens after the modelForm update, so create payload again here\n            this.createPayload();\n        } else {\n            this.uploadedImageName = undefined;\n            this.fileNotChosen = 'choose .wrl file';\n        }\n    }\n\n    onSubmit(): void {\n        if ( this.modelForm.valid ) {\n            this.modelRunning = true;\n            this._modelService.submitSinglePointRequest( this.payload ).subscribe( data => {\n                // this will only work for shallow objects from the api\n                const results = Object.assign({}, data);\n                Object.keys( data ).forEach( key => results[key] = this.round( data[key], 4 ));\n                this.results = results;\n                this.modelRunning = false;\n                // if there is an associated image\n                if ( this.hasAssociatedImage ) {\n                    // add date in query param to stop image caching\n                    this.geometryImageSrc = environment.vectorApi + '/image/' + this.sessionId + '?' + Date.now();\n                } else {\n                    this.geometryImageSrc = undefined;\n                }\n            });\n            // format the model form values back to values appropriate for the form\n            this.modelForm.patchValue({\n                diameter: this.payload.diameter,\n                length: this.payload.length,\n                area: this.payload.area,\n                pitch: this.payload.pitch,\n                sideslip: this.payload.sideslip,\n                temperature: this.payload.temperature,\n                speed: this.payload.speed,\n                composition: {\n                    o: (+this.payload.composition.o).toPrecision(4),\n                    o2: (+this.payload.composition.o2).toPrecision(4),\n                    n2: (+this.payload.composition.n2).toPrecision(4),\n                    he: (+this.payload.composition.he).toPrecision(4),\n                    h: (+this.payload.composition.h).toPrecision(4)\n                },\n                energyAccommodation: this.payload.energyAccommodation,\n                surfaceMass: this.payload.surfaceMass\n            }, { emitEvent: false, onlySelf: true });\n        }\n    }\n\n    resetImage() {\n        this.geometryImageSrc = undefined;\n    }\n\n    round(value: number, decimals: number): string {\n        const roundedNumber = Number(Math.round(+(value + 'e' + decimals)) + 'e-' + decimals);\n        return roundedNumber.toFixed(4);\n    }\n\n    setShowHideConditions(): void {\n        const objectType = this.modelForm.value.objectType;\n        this.showArea = objectType === 'plate';\n        this.showDiameter = objectType === 'sphere' || objectType === 'cylinder';\n        this.showLength = objectType === 'cylinder';\n        this.showPitch = objectType !== 'sphere';\n        this.showSideslip = !this.geometryListSimple.includes( objectType );\n        this.showEnergyAccommodation = this.modelForm.value.accommodationModel === 'Fixed';\n        this.showSurfaceMass = this.modelForm.value.accommodationModel === 'Goodman';\n    }\n\n    validateFields() {\n        // create and format invalid field error message\n        const invalidModelFormFields = Object.keys(this.modelForm.controls).filter( control => this.modelForm.controls[control].invalid );\n        this.invalidFields = invalidModelFormFields;\n        const invalidFieldsInComposition: string[] =\n            Object.keys(this.modelForm.controls.composition['controls'])\n                .filter( control => this.modelForm.controls.composition['controls'][control].invalid );\n        if ( this.invalidFields.length ) {\n            const speciesString = invalidFieldsInComposition.join(', ');\n            const compositionString = 'composition (' + speciesString + ')';\n            const compositionIndex = this.invalidFields.indexOf('composition');\n            this.invalidFields[compositionIndex] = compositionString;\n        }\n        this.invalidFieldMessage = 'invalid fields: ' + this.invalidFields.join(', ');\n    }\n}\n","<mat-card class=\"model-content\">\n    <mat-tab-group backgroundColor=\"primary\" color=\"accent\">\n        <mat-tab label=\"Single Point\">\n            <form class=\"form\" [formGroup]=\"modelForm\" (ngSubmit)=\"onSubmit()\">\n                <div class=\"form__control-group\">\n                    <div class=\"form__column\">\n                        <mat-card-title>Satellite</mat-card-title>\n                        <div class=\"form__row\">\n                            <div class=\"form__column\">\n                                <mat-form-field floatLabel=\"always\" class=\"form__field form__field--wide\">\n                                    <mat-label>Object Type</mat-label>\n                                    <mat-select formControlName=\"objectType\" panelClass=\"form__select\">\n                                        <ng-container *ngFor=\"let type of geometryList\">\n                                            <mat-option [value]=\"type\">\n                                                {{geometryNames[type]}}\n                                            </mat-option>\n                                        </ng-container>\n                                        <mat-optgroup label=\"upload file (.wrl format):\">\n                                            <mat-option value=\"custom\">\n                                                <input\n                                                type=\"file\"\n                                                accept=\".wrl\"\n                                                (change)=\"onFileSelect($event.target)\"\n                                                >\n                                                <span>{{ uploadedImageName }}</span>\n                                            </mat-option>\n                                        </mat-optgroup>\n                                    </mat-select>\n                                    <mat-hint>select satellite shape</mat-hint>\n                                    <mat-error *ngIf=\"modelForm.controls.objectType.invalid\">{{getValidationMessage('objectType')}}</mat-error>\n                                </mat-form-field>\n                                <div *ngIf=\"fileNotChosen\" class=\"form__warning\">{{fileNotChosen}}</div>\n                            </div>\n                            <mat-form-field *ngIf=\"showDiameter\" floatLabel=\"always\" class=\"form__field\">\n                                <mat-label>Diameter (m)</mat-label>\n                                <input matInput type=\"number\" formControlName=\"diameter\">\n                                <mat-hint>diameter of satellite in meters</mat-hint>\n                                <mat-error *ngIf=\"modelForm.controls.diameter.invalid\">{{getValidationMessage('diameter')}}</mat-error>\n                            </mat-form-field>\n                            <mat-form-field  *ngIf=\"showLength\" floatLabel=\"always\" class=\"form__field\">\n                                <mat-label>Length (m)</mat-label>\n                                <input matInput type=\"number\" formControlName=\"length\">\n                                <mat-hint>length of satellite in meters</mat-hint>\n                                <mat-error *ngIf=\"modelForm.controls.length.invalid\">{{getValidationMessage('length')}}</mat-error>\n                            </mat-form-field>\n                            <mat-form-field *ngIf=\"showArea\" floatLabel=\"always\" class=\"form__field\">\n                                <mat-label>Area (m<sup>2</sup>)</mat-label>\n                                <input matInput type=\"number\" formControlName=\"area\">\n                                <mat-hint>flat plate area in meters squared</mat-hint>\n                                <mat-error *ngIf=\"modelForm.controls.area.invalid\">{{getValidationMessage('area')}}</mat-error>\n                            </mat-form-field>\n                            <mat-form-field *ngIf=\"showPitch\" floatLabel=\"always\" class=\"form__field\">\n                                <mat-label>Pitch (deg)</mat-label>\n                                <input matInput type=\"number\" formControlName=\"pitch\">\n                                <mat-hint>pitch angle of satellite in degrees</mat-hint>\n                                <mat-error *ngIf=\"modelForm.controls.pitch.invalid\">{{getValidationMessage('pitch')}}</mat-error>\n                            </mat-form-field>\n                            <mat-form-field  *ngIf=\"showSideslip\" floatLabel=\"always\" class=\"form__field\">\n                                <mat-label>Sideslip (deg)</mat-label>\n                                <input matInput type=\"number\" formControlName=\"sideslip\">\n                                <mat-hint>sideslip angle of satellite in degrees</mat-hint>\n                                <mat-error *ngIf=\"modelForm.controls.sideslip.invalid\">{{getValidationMessage('sideslip')}}</mat-error>\n                            </mat-form-field>\n                        </div>\n                    </div>\n                    <div class=\"form__column\">\n                        <mat-card-title>Ambient Conditions</mat-card-title>\n                        <div class=\"form__row\">\n                            <mat-form-field floatLabel=\"always\" class=\"form__field\">\n                                <mat-label>Temperature (K)</mat-label>\n                                <input matInput type=\"number\" formControlName=\"temperature\">\n                                <mat-hint>atmospheric temperature in Kelvin</mat-hint>\n                                <mat-error *ngIf=\"modelForm.controls.temperature.invalid\">{{getValidationMessage('temperature')}}</mat-error>\n                            </mat-form-field>\n                            <mat-form-field floatLabel=\"always\" class=\"form__field\">\n                                <mat-label>Speed (m/s)</mat-label>\n                                <input matInput  type=\"number\" formControlName=\"speed\">\n                                <mat-hint>speed in meters/second</mat-hint>\n                                <mat-error *ngIf=\"modelForm.controls.speed.invalid\">{{getValidationMessage('speed')}}</mat-error>\n                            </mat-form-field>\n                        </div>\n                        <div class=\"form__parent-label\">Composition</div>\n                        <div class=\"form__parent\" formGroupName=\"composition\">\n                            <div class=\"form__row\">\n                                <mat-form-field floatLabel=\"always\" class=\"form__field\">\n                                    <mat-label>O (m<sup>-3</sup>)</mat-label>\n                                    <input matInput type=\"number\" formControlName=\"o\">\n                                    <mat-hint>atomic oxygen number density per cubic meter</mat-hint>\n                                    <mat-error *ngIf=\"modelForm.controls.composition.invalid\">{{getValidationMessage('composition', 'o')}}</mat-error>\n                                </mat-form-field>\n                                <mat-form-field floatLabel=\"always\" class=\"form__field\">\n                                    <mat-label>O<sub>2</sub> (m<sup>-3</sup>)</mat-label>\n                                    <input matInput type=\"number\" formControlName=\"o2\">\n                                    <mat-hint>molecular oxygen number density per cubic meter</mat-hint>\n                                    <mat-error *ngIf=\"modelForm.controls.composition.invalid\">{{getValidationMessage('composition', 'o2')}}</mat-error>\n                                </mat-form-field>\n                                <mat-form-field floatLabel=\"always\" class=\"form__field\">\n                                    <mat-label>N<sub>2</sub> (m<sup>-3</sup>)</mat-label>\n                                    <input matInput type=\"number\" formControlName=\"n2\">\n                                    <mat-hint>molecular nitrogen number density per cubic meter</mat-hint>\n                                    <mat-error *ngIf=\"modelForm.controls.composition.invalid\">{{getValidationMessage('composition', 'n2')}}</mat-error>\n                                </mat-form-field>\n                                <mat-form-field floatLabel=\"always\" class=\"form__field\">\n                                    <mat-label>He (m<sup>-3</sup>)</mat-label>\n                                    <input matInput type=\"number\" formControlName=\"he\">\n                                    <mat-hint>helium number density per cubic meter</mat-hint>\n                                    <mat-error *ngIf=\"modelForm.controls.composition.invalid\">{{getValidationMessage('composition', 'he')}}</mat-error>\n                                </mat-form-field>\n                                <mat-form-field floatLabel=\"always\" class=\"form__field\">\n                                    <mat-label>H (m<sup>-3</sup>)</mat-label>\n                                    <input matInput type=\"number\" formControlName=\"h\">\n                                    <mat-hint>hydrogen number density per cubic meter</mat-hint>\n                                    <mat-error *ngIf=\"modelForm.controls.composition.invalid\">{{getValidationMessage('composition', 'h')}}</mat-error>\n                                </mat-form-field>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"form__column\">\n                        <mat-card-title>Surface Conditions</mat-card-title>\n                        <div class=\"form__row\">\n                            <mat-form-field floatLabel=\"always\" class=\"form__field form__field--wide\">\n                                <mat-label>Energy Accommodation Model</mat-label>\n                                <mat-select  formControlName=\"accommodationModel\">\n                                    <mat-option *ngFor=\"let model of models\" [value]=\"model\">\n                                        {{model}}\n                                    </mat-option>\n                                </mat-select>\n                                <mat-hint>model to use for energy accommodation value</mat-hint>\n                                <mat-error *ngIf=\"modelForm.controls.accommodationModel.invalid\">{{getValidationMessage('accommodationModel')}}</mat-error>\n                            </mat-form-field>\n                            <mat-form-field *ngIf=\"showEnergyAccommodation\" floatLabel=\"always\" class=\"form__field form__field--wide\">\n                                <mat-label>Energy Accommodation</mat-label>\n                                <input matInput formControlName=\"energyAccommodation\">\n                                <mat-hint>alpha</mat-hint>\n                                <mat-error *ngIf=\"modelForm.controls.energyAccommodation.invalid\">{{getValidationMessage('energyAccommodation')}}</mat-error>\n                            </mat-form-field>\n                            <mat-form-field  *ngIf=\"showSurfaceMass\" floatLabel=\"always\" class=\"form__field\">\n                                <mat-label>Surface Mass (amu)</mat-label>\n                                <input matInput type=\"number\" formControlName=\"surfaceMass\">\n                                <mat-hint>surface mass in amu</mat-hint>\n                                <mat-error *ngIf=\"modelForm.controls.surfaceMass.invalid\">{{getValidationMessage('surfaceMass')}}</mat-error>\n                            </mat-form-field>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"form__submit\" [class.form__submit--pending]=\"modelRunning\">\n                    <button mat-raised-button [disabled]=\"modelForm.invalid || fileNotChosen || modelRunning\" color=\"primary\" type=\"submit\">Submit</button>\n                </div>\n            </form>\n            <div class=\"results\">\n                <div class=\"results__item\">\n                    <mat-card-title>\n                        Submission Values <span class=\"results__invalid\" *ngIf=\"modelForm.invalid\">(invalid)</span>\n                    </mat-card-title>\n                    <pre>\n                        {{ payload | json }}\n                    </pre>\n                    <div *ngIf=\"invalidFields?.length\" class=\"results__invalid\">\n                        {{ invalidFieldMessage }}\n                    </div>\n                </div>\n                <div class=\"results__item\" [class.results__item--hidden]=\"!geometryImageSrc\">\n                    <ng-container *ngIf=\"geometryImageSrc\">\n                        <mat-card-title>\n                            Geometry\n                        </mat-card-title>\n                        <div>\n                            {{ uploadedImageName || preloadedImageName }}\n                        </div>\n                        <img\n                            [src]=\"geometryImageSrc\"\n                            alt=\"drawing of satellite\"\n                            width=\"275\"\n                        >\n                        <div class=\"results__caption\">Direction of velocity is towards the viewer.</div>\n                    </ng-container>\n                </div>\n\n                <div class=\"results__item\" [class.results__item--hidden]=\"!results\">\n                    <mat-card-title>\n                        Results\n                    </mat-card-title>\n                    <mat-card>\n                        <div class=\"results__key-value\" *ngFor=\"let result of results | keyvalue\">\n                            <p>\n                                <span>\n                                    <strong *ngIf=\"resultTranslator[result.key].title\">{{ resultTranslator[result.key].title }}</strong>\n                                    <strong *ngIf=\"!resultTranslator[result.key].title\">{{ result.key }}</strong>:\n                                    {{ result.value }}\n                                </span>\n                                <span class=\"results__units\" [innerHtml]=\"resultTranslator[result.key].units\"></span>\n                            </p>\n                        </div>\n                    </mat-card>\n                </div>\n            </div>\n        </mat-tab>\n        <mat-tab label=\"Multi Point\">\n            <div class=\"form\">\n                Multi point file upload coming soon.\n            </div>\n        </mat-tab>\n    </mat-tab-group>\n</mat-card>\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { CalculatorComponent } from './calculator.container';\n\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: CalculatorComponent\n    }\n];\n\n@NgModule({\n    imports: [ RouterModule.forChild(routes) ],\n    exports: [ RouterModule ]\n})\nexport class CalculatorRoutingModule { }\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ModelService {\n    data: {};\n\n    constructor(private _http: HttpClient) { }\n\n    submitSinglePointRequest( payload: any) {\n        return this._http.post<any>( environment.vectorApi + '/singlepoint', payload);\n    }\n\n    submitGeometryFile( id: string, file?: any ) {\n        const formData = new FormData();\n        formData.append('file', file);\n        return this._http.put<any>( environment.vectorApi + '/geometry/' + id, formData );\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { MaterialModule } from '../../modules';\n\nimport { CalculatorRoutingModule } from './calculator-routing.module';\nimport { CalculatorComponent } from './calculator.container';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        MaterialModule,\n        CalculatorRoutingModule,\n        ReactiveFormsModule\n    ],\n    declarations: [ CalculatorComponent ]\n})\nexport class CalculatorModule { }\n","export * from './model/model.service';\n"],"sourceRoot":"webpack:///"}